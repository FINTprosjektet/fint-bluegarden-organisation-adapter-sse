package no.fint.provider.bluegarden.soap;

import no.fint.provider.Application;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import java.net.MalformedURLException;
import java.net.URL;

/**
 * This class was generated by Apache CXF 3.1.9
 * 2017-01-17T12:04:57.478+01:00
 * Generated source version: 3.1.9
 * 
 */
@WebServiceClient(name = "GetAnsattListSOAPQSService", 
                  /*wsdlLocation = "file:src/main/resources/schema/GetAnsattListBA.wsdl",*/
                  targetNamespace = "http://ansattlist.bluegarden.no/service/v3_1/wsdl") 
public class GetAnsattListSOAPQSService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://ansattlist.bluegarden.no/service/v3_1/wsdl", "GetAnsattListSOAPQSService");
    public final static QName GetAnsattListSOAPQSPort = new QName("http://ansattlist.bluegarden.no/service/v3_1/wsdl", "GetAnsattListSOAPQSPort");

    static final ClassLoader loader = Application.class.getClassLoader();
    static {
        URL url = null;
        try {
            url = new URL(loader.getResource("schema/GetAnsattListBA.wsdl").toString());
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(GetAnsattListSOAPQSService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "file:src/main/resources/schema/GetAnsattListBA.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public GetAnsattListSOAPQSService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public GetAnsattListSOAPQSService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public GetAnsattListSOAPQSService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public GetAnsattListSOAPQSService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public GetAnsattListSOAPQSService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public GetAnsattListSOAPQSService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns GetAnsattList
     */
    @WebEndpoint(name = "GetAnsattListSOAPQSPort")
    public GetAnsattList getGetAnsattListSOAPQSPort() {
        return super.getPort(GetAnsattListSOAPQSPort, GetAnsattList.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns GetAnsattList
     */
    @WebEndpoint(name = "GetAnsattListSOAPQSPort")
    public GetAnsattList getGetAnsattListSOAPQSPort(WebServiceFeature... features) {
        return super.getPort(GetAnsattListSOAPQSPort, GetAnsattList.class, features);
    }

}
